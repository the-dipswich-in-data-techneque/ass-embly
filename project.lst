 Addr: OPCODE   LineNo: Source
x3000: x481c         3:             main JSR          initcoms
x3001: x5260         4:                  AND          r1      r1      x0  ;current player
x3002: x4839         5:        normalRun JSR          progcoms
x3003: xe4d7         6:                  LEA          r2      playerStart ;;R2 = player data, R3 addres, R4 = math
x3004: x1681         7:                  ADD          r3      r2      r1
x3005: x64c0         8:                  LDR          r2      r3      x0
x3006: x2815         9:                  LD           r4      price
x3007: x1884        10:                  ADD          r4      r2   r4
x3008: x080c        11:                  BRn          final
x3009: x4855        12:                  JSR          roll
x300a: x4889        13:                  JSR          store
x300b: x1480        14:                  ADD          r2      r2      r0
x300c: x74c0        15:                  STR          r2      r3      x0      
x300d: x1261        16:                  ADD          r1      r1      x1
x300e: x20cb        17:                  LD           r0      playerCount
x300f: x903f        18:                  NOT          r0      r0
x3010: x1021        19:                  ADD          r0      r0      x1
x3011: x1001        20:                  ADD          r0      r0      r1
x3012: x0801        21:                  BRn          x1
x3013: x5260        22:                  AND          r1      r1      x0
x3014: x0fed        23:                  BRnzp        normalRun
x3015: x5020        24:            final AND          r0      r0      x0
x3016: x103f        25:                  ADD          r0      r0      x-1
x3017: x48a7        26:                  JSR          TX
x3018: x48a6        27:                  JSR          TX
x3019: x1060        28:                  ADD          r0      r1      x0
x301a: x48a4        29:                  JSR          TX
x301b: x0fe4        30:                  BRnzp        main
x301c: xff9c        31:            price .FILL        x-64
x301d: x3e3c        33:         initcoms ST           r7      storeR7
x301e: x4886        34:         loopcoms JSR          RX;;;R1 = cash, R2 = number of players
x301f: x1020        35:                  ADD          r0      r0      x0  ;see what was recieved
x3020: x0814        36:                  BRn          setCash
x3021: x0217        37:                  BRp          setCount
x3022: xe0b8        38:                  LEA          r0      playerStart 
x3023: x7200        39:         initloop STR          r1      r0      x0  ;store next player's cash
x3024: x1021        40:                  ADD          r0      r0      x1
x3025: x14bf        41:                  ADD          r2      r2      x-1
x3026: x03fc        42:                  BRp          initloop
x3027: x20b2        43:                  LD           r0      playerCount 
x3028: x22af        44:                  LD           r1      arrayStart
x3029: x1400        45:                  ADD          r2      r0      r0  ;mult by 10
x302a: x1482        46:                  ADD          r2      r2      r2
x302b: x1482        47:                  ADD          r2      r2      r2
x302c: x1480        48:                  ADD          r2      r2      r0
x302d: x1480        49:                  ADD          r2      r2      r0
x302e: x94bf        50:                  NOT          r2      r2          ;set to negative
x302f: x14a1        51:                  ADD          r2      r2      x1
x3030: x20a7        52:                  LD           r0      arrayStart
x3031: x1480        53:                  ADD          r2      r2      r0  ;move the wheel to make space for old results
x3032: x34a5        54:                  ST           r2      arrayStart
x3033: x2e26        55:                  LD           r7      storeR7
x3034: xc1c0        56:                  RET                              ;;;;;;;;;;;;;;
x3035: x903f        57:          setcash NOT          r0      r0          ;flip to positive
x3036: x1021        58:                  ADD          r0      r0      x1
x3037: x1220        59:                  ADD          r1      r0      x0
x3038: x0fe5        60:                  BRnzp        loopcoms
x3039: x1420        61:         setCount ADD          r2      r0      x0  ;store player count
x303a: x349f        62:                  ST           r2      playerCount
x303b: x0fe2        63:                  BRnzp        loopcoms
x303c: x3218        65:         progcoms ST           R1      storeR1
x303d: x3418        66:                  ST           R2      storeR2
x303e: x3e1b        67:                  ST           r7      storeR7
x303f: x4865        68:        progAgain JSR          RX
x3040: x1020        69:                  ADD          r0      r0      x0
x3041: x0206        70:                  BRp          extend
x3042: x040e        71:                  BRz          progDone
x3043: xe293        73:           seeold LEA          r1      resultStart ;get old results
x3044: x1240        74:                  ADD          r1      r1      r0
x3045: x6040        75:                  LDR          r0      r1      x0
x3046: x4878        76:                  JSR          TX                  ;send results
x3047: x0ff7        77:                  BRnzp        progAgain
x3048: x228f        78:           extend LD           r1      arrayStart
x3049: x248f        79:                  LD           r2      arrayLength
x304a: x9ebf        80:                  NOT          r7      r2
x304b: x1fe1        81:                  ADD          r7      r7      x1
x304c: x1247        82:                  ADD          r1      r1      r7
x304d: x7040        83:                  STR          r0      r1      x0
x304e: x14a1        84:                  ADD          r2      r2      x1
x304f: x3489        85:                  ST           r2      arrayLength
x3050: x0fee        86:                  BRnzp        progAgain
x3051: x2203        87:         progDone LD           R1      storeR1
x3052: x2403        88:                  LD           R2      storeR2
x3053: x2e06        89:                  LD           r7      storeR7
x3054: xc1c0        90:                  RET 
x3055: x0000        91:          storeR1 .FILL        x0000
x3056: x0000        92:          storeR2 .FILL        x0000
x3057: x0000        93:          storeR3 .FILL        x0000
x3058: x0000        94:          storeR4 .FILL        x0000
x3059: x0000        95:          storeR5 .FILL        x0000
x305a: x0000        96:          storeR7 .FILL        x0000
x305b: xfe02        98:         stdindat .FILL        xfe02
x305c: xfe00        99:        stdinstat .FILL        xfe00
x305d: xfe0f       101:             pbtn .FILL        xFe0F
x305e: xfe12       102:              hex .FILL        xFE12
x305f: x3ffa       103:             roll ST           r7      storeR7 ;sub routine
x3060: x33f4       104:                  ST           r1      storeR1 ;location
x3061: x35f4       105:                  ST           r2      storeR2 ;btn
x3062: x37f4       106:                  ST           r3      storeR3 ;math into
x3063: x39f4       107:                  ST           r4      storeR4 ;array length
x3064: x3bf4       108:                  ST           r5      storeR5 ;arrayLocation
x3065: x5260       109:                  AND          r1      r1      x0
x3066: x2872       110:                  LD           r4      arrayLength
x3067: x993f       111:                  NOT          r4      r4
x3068: x1921       112:                  ADD          r4      r4      x1
x3069: x21f3       113:                  LD           r0      pbtn
x306a: x1020       114:                  ADD          r0      r0      x0
x306b: x05fd       115:                  BRz          x-3
x306c: x5020       116:                  AND          r0      r0      x0;tell java to spin wheel
x306d: x4851       117:                  JSR          TX
x306e: x1021       118:          btnLoop ADD          r0      r0      x1 ; speeding
x306f: x1240       119:                  ADD          r1      r1      r0
x3070: x1644       120:                  ADD          r3      r1      r4
x3071: x0203       121:                  BRp          x3                  ;modulus operation
x3072: x1244       122:                  ADD          r1      r1      r4
x3073: x1644       123:                  ADD          r3      r1      r4
x3074: x03fd       124:                  BRp          x-3                 ;more modulus
x3075: x967f       125:                  NOT          r3      r1
x3076: x16e1       126:                  ADD          r3      r3      x1
x3077: x16c5       127:                  ADD          r3      r3      r5
x3078: x66c0       128:                  LDR          r3      r3      x0
x3079: xb7e4       129:                  STI          r3      hex
x307a: x25e2       130:                  LD           r2      pbtn
x307b: x14a0       131:                  ADD          r2      r2      x0
x307c: x05f1       132:                  BRz          btnLoop
x307d: x103f       133:            noBTN ADD          r0      r0      x-1 ; slowing
x307e: x1240       134:                  ADD          r1      r1      r0
x307f: x0203       135:                  BRp          x3                  ;modulus operation
x3080: x1244       136:                  ADD          r1      r1      r4
x3081: x1644       137:                  ADD          r3      r1      r4
x3082: x03fd       138:                  BRp          x-3                 ;more modulus
x3083: x967f       139:                  NOT          r3      r1
x3084: x16e1       140:                  ADD          r3      r3      x1
x3085: x16c5       141:                  ADD          r3      r3      r5
x3086: x66c0       142:                  LDR          r3      r3      x0
x3087: xb7d6       143:                  STI          r3      hex
x3088: x10e0       144:                  ADD          r0      r3      x0
x3089: x1440       145:                  ADD          r2      r1      r0
x308a: x03f2       146:                  BRp          noBTN
x308b: x1060       147:                  ADD          r0      r1      x0
x308c: x4832       148:                  JSR          TX
x308d: x2fcc       149:                  LD           r7      storeR7 ;sub routine
x308e: x23c6       150:                  LD           r1      storeR1 ;location
x308f: x25c6       151:                  LD           r2      storeR2 ;btn
x3090: x27c6       152:                  LD           r3      storeR3 ;math into
x3091: x29c6       153:                  LD           r4      storeR4 ;array length
x3092: x2bc6       154:                  LD           r5      storeR5 ;arrayLocation
x3093: xc1c0       155:                  RET 
x3094: x3222       157:            store ST           R1      tempR1
x3095: x3422       158:                  ST           R2      tempR2
x3096: x3622       159:                  ST           R3      tempR3
x3097: x223f       160:                  LD           r1      resultStart
x3098: x263f       161:                  LD           r3      arrayStart
x3099: x96ff       162:                  NOT          r3      r3
x309a: x16ff       163:                  ADD          r3      r3      x-1 ;move (so -1 becomes first)
x309b: x6440       164:        storeLoop LDR          r2      r1      x0  ;remove from space
x309c: x7040       165:                  STR          r0      r1      x0  ;store from before
x309d: x10a0       166:                  ADD          r0      r2      x0  ;swap new to old position
x309e: x127f       167:                  ADD          r1      r1      x-1 ;move to next
x309f: x1443       168:                  ADD          r2      r1      r3  ;see if there is space for mor
x30a0: x03fa       169:                  BRp          storeLoop           ;repeat
x30a1: x2215       170:                  LD           r1      tempR1
x30a2: x2415       171:                  LD           r2      tempR2
x30a3: x2615       172:                  LD           r3      tempR3
x30a4: xc1c0       173:                  RET 
x30a5: x3211       176:               RX ST           r1      tempR1
x30a6: x21b5       177:                  LD           r0      stdinstat
x30a7: x07fe       178:                  BRzp         x-2
x30a8: x23b2       179:                  LD           r1      stdindat
x30a9: x1241       180:                  ADD          r1      r1      r1  ;left shift 1
x30aa: x1241       181:                  ADD          r1      r1      r1  ;2
x30ab: x1241       182:                  ADD          r1      r1      r1  ;3
x30ac: x1241       183:                  ADD          r1      r1      r1  ;4
x30ad: x1241       184:                  ADD          r1      r1      r1  ;5
x30ae: x1241       185:                  ADD          r1      r1      r1  ;6
x30af: x1241       186:                  ADD          r1      r1      r1  ;7
x30b0: x1241       187:                  ADD          r1      r1      r1  ;8
x30b1: x21aa       188:                  LD           r0      stdinstat
x30b2: x07fe       189:                  BRzp         x-2
x30b3: x21a7       190:                  LD           r0      stdindat
x30b4: x1001       191:                  ADD          r0      r0      r1  ;full word from transmision
x30b5: x2201       192:                  LD           r1      tempR1
x30b6: xc1c0       193:                  RET 
x30b7: x0000       194:           tempR1 .FILL    x0
x30b8: x0000       195:           tempR2 .FILL    x0
x30b9: x0000       196:           tempR3 .FILL    x0
x30ba: x0000       197:           tempR4 .FILL    x0
x30bb: xfe06       199:        stdoutdat .FILL        xfe06
x30bc: xfe04       200:       stdoutstat .FILL        xfe04
x30bd: x00ff       202:        lowerMask .FILL        xff
x30be: x0100       203:          topMask .FILL        x100
x30bf: x33f7       204:               TX ST           r1      tempR1
x30c0: x35f7       205:                  ST           r2      tempR2
x30c1: x37f7       206:                  ST           r3      tempR3
x30c2: x39f7       207:                  ST           r4      tempR4
x30c3: x25fa       208:                  LD           r2      topMask
x30c4: x5920       209:                  AND          r4      r4      x0  ;find the top 8 bit
x30c5: x1921       210:                  ADD          r4      r4      x1
x30c6: x5202       211:           loopRS AND          r1      r0      r2
x30c7: x1904       212:                  ADD          r4      r4      r4
x30c8: x1482       213:                  ADD          r2      r2      r2
x30c9: x0bfc       214:                  BRnp         loopRS
x30ca: xa7f1       215:                  LDI          r3      stdoutstat
x30cb: x07fe       216:                  BRzp         x-2
x30cc: xb3ee       217:                  STI          r1      stdoutdat
x30cd: x25ef       218:                  LD           r2      lowerMask
x30ce: x5202       219:                  AND          r1      r0      r2  ;bottom 8 bit
x30cf: xa7ec       220:                  LDI          r3      stdoutstat
x30d0: x07fe       221:                  BRzp         x-2
x30d1: xb3e9       222:                  STI          r1      stdoutdat
x30d2: x23e4       223:                  LD           r1      tempR1
x30d3: x25e4       224:                  LD           r2      tempR2
x30d4: x27e4       225:                  LD           r3      tempR3
x30d5: x29e4       226:                  LD           r4      tempR4
x30d6: xc1c0       227:                  RET 
x30d7: xdfff       229:      resultStart .FILL        xdfff
x30d8: xdfff       230:       arrayStart .FILL        xdfff
x30d9: x0000       231:      arrayLength .FILL        x0
x30da: x0000       232:      playerCount .FILL        x0
x30db: x0000       234:      playerStart .FILL        x0                 ;this is a position after program
